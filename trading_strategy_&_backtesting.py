# -*- coding: utf-8 -*-
"""Trading Strategy & backtesting

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J6Ms7vqYFsVkswnevoBQTuGxHsIFEtig
"""

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Fetch historical data
def fetch_data(ticker, period='5y'):
    data = yf.download(ticker, period=period)
    return data

# Calculate moving averages
def calculate_moving_averages(data):
    data['5d_MA'] = data['Close'].rolling(window=5).mean()
    data['13d_MA'] = data['Close'].rolling(window=13).mean()
    data['26d_MA'] = data['Close'].rolling(window=26).mean()
    return data

# Implement trading strategy
def implement_strategy(data):
    data['Signal'] = 0
    data.loc[data['5d_MA'] > data['26d_MA'], 'Signal'] = 1
    data.loc[data['5d_MA'] > data['13d_MA'], 'Signal'] = 2
    data['Position'] = data['Signal'].diff()
    return data

# Perform backtesting
def backtest_strategy(data, initial_funds=10000):
    funds = initial_funds
    position = 0
    for i in range(len(data)):
        if data['Position'].iloc[i] == 1:
            position += 0.3 * funds / data['Close'].iloc[i]
            funds -= 0.3 * funds
        elif data['Position'].iloc[i] == 2:
            position += 0.7 * funds / data['Close'].iloc[i]
            funds -= 0.7 * funds
        elif data['Position'].iloc[i] == -1:
            funds += 0.3 * position * data['Close'].iloc[i]
            position -= 0.3 * position
        elif data['Position'].iloc[i] == -2:
            funds += 0.7 * position * data['Close'].iloc[i]
            position -= 0.7 * position
    final_value = funds + position * data['Close'].iloc[-1]
    return final_value

# Calculate returns
def calculate_returns(ticker, initial_funds=10000):
    periods = ['3mo', '6mo' , '1y', '2y', '5y']  # Replaced '3y' with '2y'
    returns = {}
    for period in periods:
        try:
            data_period = fetch_data(ticker, period=period)
            if len(data_period) < 26:  # Ensure there's enough data for moving averages
                raise ValueError("Not enough data for the given period")
            data_period = calculate_moving_averages(data_period)
            data_period = implement_strategy(data_period)
            final_value = backtest_strategy(data_period, initial_funds)
            returns[period] = (final_value - initial_funds) / initial_funds * 100
        except Exception as e:
            returns[period] = f"Error: {e}"
    return returns

# Main function
if __name__ == "__main__":
    ticker = '^NSEI'  # Example ticker
    data = fetch_data(ticker)
    data = calculate_moving_averages(data)
    data = implement_strategy(data)
    returns = calculate_returns(ticker)
    print("Returns over different periods:")
    for period, ret in returns.items():
        print(f"{period}: {ret}")